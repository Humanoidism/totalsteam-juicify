// Generated by CoffeeScript 1.6.3
var Blender;

Blender = (function() {
  function Blender() {
    this.liquidAmount = 10.0;
    this.dropsPrMl = 25.0;
    this.pg = 50.0;
    this.vg = 50.0;
    this.nicoPGVG = 20.0;
    this.nicoTarget = 10.0;
    this.water = 15.0;
    this.Aromas = {};
  }

  Blender.prototype.addAroma = function(id, name, value) {
    return this.Aromas[id] = {
      id: id,
      name: name,
      value: value
    };
  };

  Blender.prototype.removeAroma = function(id) {
    delete this.Aromas[id];
  };

  Blender.prototype.setAroma = function(id, data) {
    this.Aromas[id].value = data.value || this.Aromas[id].value;
    this.Aromas[id].name = data.name || this.Aromas[id].name;
  };

  Blender.prototype.updatedBase = function() {
    var add, aroma, key, total, _nicoPGVG, _ref;
    total = 0;
    add = function(i) {
      return total += parseInt(i.value, 0);
    };
    if (typeof this.Aromas === 'object') {
      _ref = this.Aromas;
      for (key in _ref) {
        aroma = _ref[key];
        add(aroma);
      }
    }
    _nicoPGVG = parseInt((this.nicoPGVG <= 0 ? 0 : 100 * this.nicoTarget / this.nicoPGVG));
    _ref = {
      nicoPGVG: parseInt(_nicoPGVG),
      pg: parseInt(this.pg - ((_nicoPGVG / 2) + ((parseInt(this.water) + total) * (this.pg / 100)))),
      vg: parseInt(this.vg - ((_nicoPGVG / 2) + ((parseInt(this.water) + total) * (this.vg / 100))))
    };
    return _ref;
  };

  Blender.prototype.getIngredients = function() {
    var aroma, key, _aroma, _ref, _ref1;
    _ref = [
      {
        name: "nicoPGVG",
        percentage: parseInt(this.updatedBase().nicoPGVG),
        value: parseInt(this.updatedBase().nicoPGVG / this.liquidAmount),
        drops: parseInt(this.updatedBase().nicoPGVG / this.liquidAmount * this.dropsPrMl)
      }, {
        name: "PG",
        percentage: parseInt(this.updatedBase().pg),
        value: parseInt(this.updatedBase().pg / this.liquidAmount),
        drops: parseInt(this.updatedBase().pg / this.liquidAmount * this.dropsPrMl)
      }, {
        name: "VG",
        percentage: parseInt(this.updatedBase().vg),
        value: parseInt(this.updatedBase().vg / this.liquidAmount),
        drops: parseInt(this.updatedBase().vg / this.liquidAmount * this.dropsPrMl)
      }, {
        name: "water",
        percentage: parseInt(this.water),
        value: parseInt(this.water / this.liquidAmount),
        drops: parseInt(this.water / this.liquidAmount * this.dropsPrMl)
      }
    ];
    _ref1 = this.Aromas;
    for (key in _ref1) {
      aroma = _ref1[key];
      _aroma = {};
      _aroma.id = aroma.id;
      _aroma.name = aroma.name;
      _aroma.percentage = aroma.value;
      _aroma.value = aroma.value / this.liquidAmount;
      _aroma.drops = aroma.value / this.liquidAmount * this.dropsPrMl;
      _ref.push(_aroma);
    }
    return _ref;
  };

  return Blender;

})();
